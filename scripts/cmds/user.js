const { getTime } = global.utils;

module.exports = {
	config: {
		name: "user",
		version: "1.0",
		author: "Nguy·ªÖn ƒê·ª©c Duy",
		countDown: 5,
		role: 2,
		shortDescription: "Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
		longDescription: "Qu·∫£n l√Ω ng∆∞·ªùi d√πng trong h·ªá th·ªëng bot",
		category: "owner",
		guide: "{pn} {{[find | -f | search | -s]}} <t√™n c·∫ßn t√¨m>: t√¨m ki·∫øm ng∆∞·ªùi d√πng trong d·ªØ li·ªáu bot b·∫±ng t√™n"
			+ "\n"
			+ "\n{pn} {{[ban | -b] [<uid> | @tag}} | reply tin nh·∫Øn] {{<reason>}}: ƒë·ªÉ c·∫•m ng∆∞·ªùi d√πng mang id <uid> ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c tag ho·∫∑c ng∆∞·ªùi g·ª≠i c·ªßa tin nh·∫Øn ƒë∆∞·ª£c reply s·ª≠ d·ª•ng bot"
			+ "\n"
			+ "\n{pn} {{unban [<uid> | @tag}} | reply tin nh·∫Øn]: ƒë·ªÉ b·ªè c·∫•m ng∆∞·ªùi d√πng s·ª≠ d·ª•ng bot"
	},

	onStart: async function ({ args, usersData, message, event, prefix }) {
		const type = args[0];
		switch (type) {
			// find user
			case "find":
			case "-f":
			case "search":
			case "-s": {
				const allUser = await usersData.getAll();
				const keyWord = args.slice(1).join(" ");
				const result = allUser.filter(item => item.name.toLowerCase().includes(keyWord.toLowerCase()));
				const msg = result.reduce((i, user) => i += `\n‚ï≠Name: {{${user.name}}}\n‚ï∞ID: ${user.userID}`, "");
				message.reply(result.length == 0 ? `‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o c√≥ t√™n kh·ªõp v·ªõi t·ª´ kh√≥a: "{{${keyWord}}}" trong d·ªØ li·ªáu c·ªßa bot` : `üîé T√¨m th·∫•y ${result.length} ng∆∞·ªùi d√πng c√≥ t√™n tr√πng v·ªõi t·ª´ kh√≥a "{{${keyWord}}}" trong d·ªØ li·ªáu c·ªßa bot:\n${msg}`);
				break;
			}
			// ban user
			case "ban":
			case "-b": {
				let uid, reason;
				if (event.type == "message_reply") {
					uid = event.messageReply.senderID;
					reason = args.slice(1).join(" ");
				}
				else if (Object.keys(event.mentions).length > 0) {
					const { mentions } = event;
					uid = Object.keys(mentions)[0];
					reason = args.slice(1).join(" ").replace(mentions[uid], "");
				}
				else if (args[1]) {
					uid = args[1];
					reason = args.slice(2).join(" ");
				}
				else return message.SyntaxError();

				if (!uid)
					return message.reply("Uid c·ªßa ng∆∞·ªùi c·∫ßn ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng, vui l√≤ng nh·∫≠p uid ho·∫∑c tag ho·∫∑c reply tin nh·∫Øn c·ªßa 1 ng∆∞·ªùi theo c√∫ ph√°p user ban <uid> <l√Ω do>");
				if (!reason)
					return message.reply(`L√Ω do c·∫•m ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng, vui l√≤ng so·∫°n tin nh·∫Øn theo c√∫ ph√°p {{${prefix}user ban <uid>}} <l√Ω do>`);
				reason = reason.replace(/\s+/g, ' ');

				const userData = await usersData.get(uid);
				const name = userData.name;
				const status = userData.banned.status;

				if (status)
					return message.reply(`Ng∆∞·ªùi d√πng mang id [${uid} | {{${name}}}] ƒë√£ b·ªã c·∫•m t·ª´ tr∆∞·ªõc:\n¬ª L√Ω do: {{${userData.banned.reason}}}\n¬ª Th·ªùi gian: ${userData.banned.date}`);
				const time = getTime("DD/MM/YYYY HH:mm:ss");
				await usersData.set(uid, {
					banned: {
						status: true,
						reason,
						date: time
					}
				});
				message.reply(`ƒê√£ c·∫•m ng∆∞·ªùi d√πng mang id [${uid} | {{${name}}}] s·ª≠ d·ª•ng bot.\n¬ª L√Ω do: ${reason}\n¬ª Th·ªùi gian: ${time}`);
				break;
			}
			// unban user
			case "unban":
			case "-u": {
				let uid;
				if (event.type == "message_reply") {
					uid = event.messageReply.senderID;
				}
				else if (Object.keys(event.mentions).length > 0) {
					const { mentions } = event;
					uid = Object.keys(mentions)[0];
				}
				else if (args[1]) {
					uid = args[1];
				}
				else return message.SyntaxError();
				if (!uid)
					return message.reply(`Uid c·ªßa ng∆∞·ªùi c·∫ßn unban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng`);
				const userData = await usersData.get(uid);
				const name = userData.name;
				const status = userData.banned.status;
				if (!status)
					return message.reply(`Hi·ªán t·∫°i ng∆∞·ªùi d√πng mang id [${uid} | {{${name}}}] kh√¥ng b·ªã c·∫•m s·ª≠ d·ª•ng bot`);
				await usersData.set(uid, {
					banned: {
						status: false,
						reason: null
					}
				});
				message.reply(`ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng mang id [${uid} | {{${name}}}], hi·ªán t·∫°i ng∆∞·ªùi n√†y c√≥ th·ªÉ s·ª≠ d·ª•ng bot`);
				break;
			}
			default:
				return message.SyntaxError();
		}
	}
};